[{"D:\\T3H\\project\\src\\index.js":"1","D:\\T3H\\project\\src\\reportWebVitals.js":"2","D:\\T3H\\project\\src\\App.js":"3","D:\\T3H\\project\\src\\pages\\PostDetail.jsx":"4","D:\\T3H\\project\\src\\pages\\Home.jsx":"5","D:\\T3H\\project\\src\\pages\\Login.jsx":"6","D:\\T3H\\project\\src\\router.js":"7","D:\\T3H\\project\\src\\auth\\BasicAuth.js":"8","D:\\T3H\\project\\src\\redux\\store.js":"9","D:\\T3H\\project\\src\\redux\\state\\user.js":"10","D:\\T3H\\project\\src\\utils\\localStorage.js":"11","D:\\T3H\\project\\src\\components\\BackgroundApp.js":"12","D:\\T3H\\project\\src\\pages\\Posts.jsx":"13","D:\\T3H\\project\\src\\components\\Antd.jsx":"14"},{"size":722,"mtime":1615822362400,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":1352,"mtime":1616324392074,"results":"18","hashOfConfig":"16"},{"size":575,"mtime":1615716704043,"results":"19","hashOfConfig":"16"},{"size":1863,"mtime":1615829137925,"results":"20","hashOfConfig":"16"},{"size":1754,"mtime":1615727204656,"results":"21","hashOfConfig":"16"},{"size":803,"mtime":1616324306164,"results":"22","hashOfConfig":"16"},{"size":494,"mtime":1615984694284,"results":"23","hashOfConfig":"16"},{"size":184,"mtime":1615723048152,"results":"24","hashOfConfig":"16"},{"size":557,"mtime":1615820656783,"results":"25","hashOfConfig":"16"},{"size":292,"mtime":1615820882418,"results":"26","hashOfConfig":"16"},{"size":422,"mtime":1615822558316,"results":"27","hashOfConfig":"16"},{"size":2466,"mtime":1616304274496,"results":"28","hashOfConfig":"16"},{"size":1291,"mtime":1616327397803,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"9xcxkl",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\T3H\\project\\src\\index.js",[],["63","64"],"D:\\T3H\\project\\src\\reportWebVitals.js",[],"D:\\T3H\\project\\src\\App.js",["65"],"D:\\T3H\\project\\src\\pages\\PostDetail.jsx",["66"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router\";\r\n\r\nconst PostDetail = () => {\r\n  const [post, setPost] = useState(null)\r\n  const { id } = useParams()\r\n\r\n  const fetchPost = id => {\r\n    axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`)\r\n      .then(response => {\r\n        setPost(response.data)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchPost(id)\r\n  }, [])\r\n\r\n  return(\r\n    <>\r\n      {\r\n        post && <h2>{post.title}</h2> \r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PostDetail\r\n","D:\\T3H\\project\\src\\pages\\Home.jsx",[],"D:\\T3H\\project\\src\\pages\\Login.jsx",["67"],"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport { setUser } from \"../redux/state/user\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n\r\n  const [userName, setUserName] = useState('')\r\n  const [userPass, setUserPass] = useState('')\r\n\r\n  const user = useSelector(store => store.user.currentUser)\r\n\r\n  const handleOnchangePass = (event) => {\r\n    setUserPass(event.target.value)\r\n  }\r\n\r\n  const handleOnchangeUseName = (event) => {\r\n    setUserName(event.target.value)\r\n  }\r\n\r\n  const submit = () => {\r\n    const id = userName\r\n\r\n    if (!id) {\r\n      return\r\n    }\r\n\r\n    axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n      .then(response => {\r\n        // console.log('response', response.data)\r\n        const user = response.data\r\n\r\n        dispatch(\r\n          setUser(user)\r\n        )\r\n\r\n        history.push(\"/\")\r\n      })\r\n      .catch(err => {\r\n        alert('error')\r\n      })\r\n  }\r\n\r\n  return(\r\n    <>  \r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 mb-3\">\r\n            <label htmlFor=\"\">User Name</label>\r\n            <input type=\"text\" name=\"\" id=\"\" value={userName} onChange={handleOnchangeUseName}/>\r\n          </div>\r\n\r\n          <div className=\"col-12 mb-3\">\r\n            <label htmlFor=\"\">Password</label>\r\n            <input type=\"password\" name=\"\" id=\"\" value={userPass} onChange={handleOnchangePass}/>\r\n          </div>\r\n        </div>\r\n\r\n        <button type=\"button\" className=\"btn btn-success\" onClick={submit}>Login</button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","D:\\T3H\\project\\src\\router.js",[],"D:\\T3H\\project\\src\\auth\\BasicAuth.js",[],"D:\\T3H\\project\\src\\redux\\store.js",[],"D:\\T3H\\project\\src\\redux\\state\\user.js",[],"D:\\T3H\\project\\src\\utils\\localStorage.js",[],"D:\\T3H\\project\\src\\components\\BackgroundApp.js",["68"],"import React, { useEffect } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst BackgroundApp = () => {\r\n  const history = useHistory()\r\n  const user = useSelector(store => store.user.currentUser)\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      history.push('/login')\r\n    }\r\n  }, [user])\r\n\r\n  return (\r\n    <>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BackgroundApp\r\n","D:\\T3H\\project\\src\\pages\\Posts.jsx",["69","70","71","72"],"import axios from \"axios\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\n\r\nconst Posts = () => {\r\n  const [listPost, setListPost] = useState([])\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [pageSize, setPageSize] = useState(5)\r\n  const [totalPage, setTotalPage] = useState(0)\r\n\r\n  const totalRecords = 100\r\n\r\n  const start = useMemo(() => {\r\n    return (currentPage - 1) * pageSize\r\n  }, [currentPage])\r\n\r\n  const fetchData = () => {\r\n    axios(`https://jsonplaceholder.typicode.com/posts?_start=${start}&_limit=${pageSize}`)\r\n      .then(response => {\r\n        setListPost(response.data)\r\n        const totalPages = Math.ceil(totalRecords / pageSize)\r\n        setTotalPage(totalPages)\r\n      })\r\n  }\r\n\r\n  const paginate = num => {\r\n    setCurrentPage(num)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [currentPage])\r\n\r\n  const pagingNumber = useMemo(() => {\r\n    const pagination = []\r\n\r\n    for (let index = 1; index <= totalPage; index++) {\r\n      pagination.push(\r\n        <li \r\n          className={`page-item ${index === currentPage ? 'active' : ''}`}\r\n          key={index}\r\n          onClick={() => paginate(index)}\r\n        >\r\n          <span className=\"page-link\">{index}</span>\r\n        </li>\r\n      )\r\n    }\r\n\r\n    return pagination\r\n  }, [totalPage, currentPage])\r\n\r\n  const goToPrev = () => {\r\n    const newPage = Math.max(currentPage - 1, 1)\r\n    setCurrentPage(newPage)\r\n  }\r\n\r\n  const goToNext = () => {\r\n    const newPage = Math.min(currentPage + 1, totalPage)\r\n    setCurrentPage(newPage)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1>List posts</h1>\r\n\r\n        <ul className=\"list-group\">\r\n          {\r\n            listPost.map(post => (\r\n              <li \r\n                className=\"list-group-item\" \r\n                key={post.id} \r\n              >\r\n                [{post.id}] {post.title}\r\n              </li>\r\n              )\r\n            )\r\n          }\r\n        </ul>\r\n\r\n        <nav aria-label=\"Page navigation example\">\r\n          <ul className=\"pagination\">\r\n            <li className=\"page-item\" onClick={goToPrev}><span className=\"page-link\">Previous</span></li>\r\n            {\r\n              pagingNumber\r\n            }\r\n            <li className=\"page-item\" onClick={goToNext}><span className=\"page-link\">Next</span></li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Posts\r\n","D:\\T3H\\project\\src\\components\\Antd.jsx",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":20},{"ruleId":"81","severity":1,"message":"82","line":18,"column":6,"nodeType":"83","endLine":18,"endColumn":8,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"85","line":16,"column":9,"nodeType":"79","messageId":"80","endLine":16,"endColumn":13},{"ruleId":"81","severity":1,"message":"86","line":14,"column":6,"nodeType":"83","endLine":14,"endColumn":12,"suggestions":"87"},{"ruleId":"77","severity":1,"message":"88","line":7,"column":20,"nodeType":"79","messageId":"80","endLine":7,"endColumn":31},{"ruleId":"81","severity":1,"message":"89","line":14,"column":6,"nodeType":"83","endLine":14,"endColumn":19,"suggestions":"90"},{"ruleId":"81","severity":1,"message":"91","line":31,"column":6,"nodeType":"83","endLine":31,"endColumn":19,"suggestions":"92"},{"ruleId":"81","severity":1,"message":"91","line":63,"column":6,"nodeType":"83","endLine":63,"endColumn":8,"suggestions":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'DatePicker' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["97"],"'setPageSize' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'pageSize'. Either include it or remove the dependency array.",["98"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["99"],["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [id]",{"range":"111","text":"112"},"Update the dependencies array to be: [history, user]",{"range":"113","text":"114"},"Update the dependencies array to be: [currentPage, pageSize]",{"range":"115","text":"116"},"Update the dependencies array to be: [currentPage, fetchData]",{"range":"117","text":"118"},"Update the dependencies array to be: [fetchData]",{"range":"119","text":"120"},[445,447],"[id]",[342,348],"[history, user]",[423,436],"[currentPage, pageSize]",[843,856],"[currentPage, fetchData]",[1600,1602],"[fetchData]"]